package baidu.openresearch.kw.feature;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;

import nju.lamda.hadoop.UtilsFileSystem;
import nju.lamda.hadoop.liblinear.SvmRecordHadoop;
import nju.lamda.svm.SvmIo;
import nju.lamda.svm.SvmRecord;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.filecache.DistributedCache;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Mapper.Context;
import org.apache.hadoop.util.Tool;

import de.bwaldvogel.liblinear.FeatureNode;

public class FeatureImportance extends Configured implements Tool {

	public static class MyMapper extends Mapper<LongWritable, Text, Text, Text> {
		private Text outputKey = new Text();
		private Text outputValue = new Text();

		private HashMap<Integer, Double> map;

		public void setup(Context context) {
			Configuration conf = context.getConfiguration();

			map = new HashMap<Integer, Double>();
			try {
				Path pathDict = DistributedCache.getLocalCacheFiles(conf)[0];
				String line;
				BufferedReader r = new BufferedReader(new FileReader(
						pathDict.toString()));

				while ((line = r.readLine()) != null) {
					String parts[] = line.split("\t");
					int index = Integer.parseInt(parts[0]);
					double imp = Double.parseDouble(parts[1]);

					map.put(index, imp);
				}
				r.close();

			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

		@Override
		public void map(LongWritable key, Text value, Context context)
				throws IOException, InterruptedException {

			SvmRecordHadoop rec = SvmRecordHadoop.FromText(value);

			FeatureNode x[] = new FeatureNode[rec.rec.feature.length];
			int cnt = 0;
			for (FeatureNode f : rec.rec.feature) {
				Double imp = map.get(f.index);
				if (imp == null) {
					imp = 1.0;
				}
				x[cnt] = new FeatureNode(f.index, imp);
				cnt++;
			}

			outputKey.set(rec.id);
			SvmRecord record = new SvmRecord(rec.rec.label, x);
			outputValue.set(SvmIo.ToString(record));
			context.write(outputKey, outputValue);
		}
	}

	public static class MyReducer extends
			Reducer<Text, Text, Text, Text> {
		@Override
		public void reduce(Text key, Iterable<Text> values,
				Context context) throws IOException, InterruptedException {
			context.write(key, values.iterator().next());
		}
	}

	@Override
	public int run(String[] arg0) throws Exception {
		// TODO Auto-generated method stub
		return 0;
	}

}
